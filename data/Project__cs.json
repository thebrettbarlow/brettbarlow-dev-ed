{
    "records": [
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef1"
            },
            "Name": "Display Projects on the Website",
            "Status__c": "In Progress",
            "Goal__c": "<p>Showcase my work and provide resources to others who may be working on similar projects.</p>",
            "Requirements__c": "<ul><li>Project__c records should be Read Only for unauthenticated users</li><li>Display a list of Project__c records</li><li>Display a single Project__c record</li><li>The Project__c object has rich text fields which sometimes contain images. These images need to show when displaying a Project__c record on the website</li><li>New scratch orgs need to include sample data</li></ul>",
            "Design__c": "<p><b>Sample Data</b></p><p>I noticed that the ebikes-lwc repo has a <a href=\"https://github.com/trailheadapps/ebikes-lwc/tree/main/data\" target=\"_blank\">data</a> folder. Taking a closer look at their <a href=\"https://github.com/trailheadapps/ebikes-lwc/blob/main/bin/install-scratch.sh\" target=\"_blank\">install-scratch.sh</a> script and I noticed they&#39;re using `force:data:tree:import` to import data into their Scratch Org. Following their lead, I&#39;ll make a data directory and use SFDX to import sample data.</p>",
            "Implementation__c": "<p><b>Sample Data</b></p><p>sfdx force:data:tree:export \\</p><p>--outputdir=data \\</p><p>--plan \\</p><p>--query=&quot;SELECT Name, Status__c, Goal__c, Requirements__c, Design__c, Implementation__c, Retrospective__c FROM Project__c ORDER BY SystemModStamp DESC LIMIT 10&quot; \\</p><p>--targetusername=brettbarlow</p><p>Wrote 10 records to data/Project__cs.json</p><p>Wrote 0 records to data/Project__c-plan.json</p><p><br></p><p>I&#39;m going to regenerate sample data on some interval. Weekly?</p>",
            "Retrospective__c": null
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef2"
            },
            "Name": "Home, About and Contact Pages for the Website",
            "Status__c": "Done",
            "Goal__c": "<p>Turn my Hello World site into a real website.</p>",
            "Requirements__c": "<ul><li>Mobile responsive</li><li>Consistent header and footer</li><li>Use Salesforce styling</li><li>Photos and other assets need to be available to unauthenticated users</li></ul>",
            "Design__c": "<p><b>Mobile Responsiveness</b></p><p>The <a href=\"https://www.lightningdesignsystem.com/utilities/grid/\" target=\"_blank\">slds-grid</a> and <a href=\"https://www.lightningdesignsystem.com/utilities/sizing/#site-main-content\" target=\"_blank\">sizing utilities</a> (e.g. slds-large-size_1-of-2) should make this pretty easy.</p><p><br></p><p><b>Header, Footer and Salesforce Styling</b></p><p>I stumbled on the <a href=\"https://www.youtube.com/playlist?list=PLgIMQe2PKPSJXw3x0cPTJhzNyLBgpZV5a\" target=\"_blank\">How to build LWR sites with Experience Cloud</a> video series during my research and learned a ton from this. They showed how to make a layout template and apply a consistent header and footer to all pages in the Experience Cloud site. They also covered different css techniques and how to apply styles across the whole site without having to change each component.</p><p><br></p><p><b>Make Photos Available to Unauthenticated Users</b></p><p>The Salesforce help article on <a href=\"https://help.salesforce.com/s/articleView?id=sf.pages_static_resources_create.htm&amp;type=5\" target=\"_blank\">Defining Static Resources</a> talks about how we can set a Static Resource as Public, which makes it accessible to all internet traffic. Sounds like this will work here.</p>",
            "Implementation__c": "<p>There was a lot of trail and error with getting this set up. <span style=\"color: rgb(68, 68, 68);\">The </span><a href=\"https://github.com/trailheadapps/az-insurance\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">az-insurance</a><span style=\"color: rgb(68, 68, 68);\"> GitHub repo was a great resource. I used it as a working example when I was figuring out how to do something.</span></p><p><br></p><p><b style=\"color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);\">Pre-Work</b></p><p>Before I got too far along, I wanted to implement some basic code linting and formatting tools. I saw that the <a href=\"https://github.com/trailheadapps/az-insurance\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">az-insurance</a><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\"> GitHub repo had eslint and prettier already configured, so I was able to use what they had and get this set up quickly via PR </span><a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/8\" target=\"_blank\">NPM Init #8</a>.</p><p><br></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);\">When I started working on the Experience Cloud site, I noticed that I had originally included a bunch of metadata that is created by default in Salesforce. I haven&#39;t modified any of this so I decided to remove it from source control via PR </span><a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/9\" target=\"_blank\">Remove Unmodified Metadata #9</a>.</p><p><br></p><p><b>Mobile Responsiveness</b></p><p>I got tripped up on how to use the <a href=\"https://www.lightningdesignsystem.com/utilities/sizing/#site-main-content\" target=\"_blank\">sizing utilities</a>. I thought the break points worked in the opposite direction, but I figured it out after looking closer at the documentation.</p><p><br></p><p>What worked for me was to define a default size (e.g. slds-size_1-of-1) and then define an override for screens that are AT OR BIGGER THAN the break point (e.g. slds-large-size_1-of-2). Here&#39;s <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/11/files#diff-7e4cf98b2e8039c6f6832c510975a5c8c10ca362c4db367c2f581e3a19a8e5e2R5-R12\" target=\"_blank\">an example</a> from PR <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/11\" target=\"_blank\">Home, Contact and About Pages for the Website #11</a>.</p><p><br></p><p><b>Header, Footer and Salesforce Styling</b></p><p>I ended up with a <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/11/files#diff-a0845f519d3df1195eea9b50bc51f5c35ad41fd0c1d58bc3009c25d4e57b67e4\" target=\"_blank\">websiteLayout</a> LWC that was very simple. It created a consistent template for all pages on the website. I made <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/10/files#diff-bf9457151e85f9dc85cd3a4ba6faef25a2ae0050322bca839c4a901e19335c93\" target=\"_blank\">header</a> and <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/10/files#diff-95b5392231c1bcee41585108948eb918c375c095afb7db2b0df613bb653fb204\" target=\"_blank\">footer</a> LWCs and put them in each their slots.</p><p><br></p><p>These components contained links that were defined as external links (pointing to my GitHub, LinkedIn, etc.) or defined as links to other pages on the site. Configuring the links in the Experience Builder puts them into NavigationLinkSet records. Borrowing a technique from <a href=\"https://github.com/trailheadapps/az-insurance\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">az-insurance</a>, I made the <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/10/files#diff-568b21e2eb3112a2b1ecb91f2ba34f5d87fbdbb8e97b6f92e02c08ded3b83fe0R16\" target=\"_blank\">header</a> and <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/10/files#diff-1631622e315975ae67182848e0cc5474332552b37822959844c3d48aa34991c9R20\" target=\"_blank\">footer</a> display a configurable set of links by retrieving a list of available options from an Apex Class called <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/10/files#diff-20119f63ebf3c21797751811193132ed6fc92f8b4d224b4e3c6b368eca65b5b0\" target=\"_blank\">NavigationLinkSetPickList</a>.</p><p><br></p><p>I need to make a call to an Apex Class called <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/10/files#diff-6020653781cd2427753e56fc47d68a432012b3ab865d6823c8fd0b0b597347c4\" target=\"_blank\">NavigationMenuItemsController</a> to actually retrieve the links, before displaying them in the UI. It took a while to get this all wired up, but I only need to configure this once and then the header and footer will be consistent for the whole website. This was done via PR <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/10\" target=\"_blank\">Header and Footer for the Website #10</a>.</p><p><br></p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xWSAN&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003SDeH\" alt=\"Screen Shot 2022-05-30 at 2.18.49 PM.png\"></img></p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xWSAN&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003SDeC\" alt=\"image.png\"></img></p><p><br></p><p><b>Make Photos Available to Unauthenticated Users</b></p><p>This was easy. I just set each Static Resource to Public (<a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/11/files#diff-317774ffb811b13d7db4900c4761cba60216902aa5c8b83eeaa920cdb30e221cR3\" target=\"_blank\">example</a>) and I was able to see it from an incognito window. Sometimes it took a few minutes for the photo to show up, but it worked eventually.</p><p><br></p><p><b>Configure Site Favicon</b></p><p>Now this was hard. I tried to do this so many different ways. Here&#39;s what worked for me:</p><ol><li>Upload your favicon as a Static Resource with `cacheControl` set to Public (<a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/11/files#diff-7b2d08146ee12b2602555794b1b8a0c98db885db05dda049885b0bff67e79c0bR3\" target=\"_blank\">example</a>)<ol><li>Use a file that ends in `.ico`. Mine was named `favicon.ico`</li></ol></li><li>Set the `favoriteIcon` field in <span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">the CustomSite metadata</span> to the name of your Static Resource (<a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/11/files#diff-aabb6ae3533f5b3450b1ae841fdf7ef768bf789b82c093dee6db0aba3511bb3e\" target=\"_blank\">example</a>)</li><li>Add `&lt;link rel=&quot;shortcut icon&quot; href=&quot;/resource/favicon&quot; type=&quot;image/x-icon&quot;/&gt;` to the HEAD Markup of your site (<a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/11/files#diff-2ef4dce4e98fccb8876d4f02e2be7c1d99b1a13ac8f42c132bbf1c3dd443471bR5\" target=\"_blank\">example</a>)<ol><li>The HEAD Markup editor can be found by clicking on the &quot;Edit HEAD Markup&quot; button in the Advanced Settings of your Experience Cloud site</li><li>This assumes your Static Resource is named `favicon`. The `.ico` suffix is not needed</li></ol></li></ol><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xWSAN&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003SDe7\" alt=\"image.png\"></img></p><p><b>Automatically Publish Changes to the Website</b></p><p>After merging all of these PRs, I noticed that the website had not updated after the <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/actions/runs/2410797699\" target=\"_blank\">deployment finished</a>. I realized that this deployment only modified metadata, but did not publish the changes to the Experience Cloud site. I added a step to the CICD workflow to run `sfdx force:community:publish`. <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/runs/6660514158?check_suite_focus=true#step:9:10\" target=\"_blank\">This worked</a> and my site was updated after merging <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/12\" target=\"_blank\">Small Fixes After First Site Deployment #12</a>.</p><p><br></p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xWSAN&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003SDeM\" alt=\"image.png\"></img></p>",
            "Retrospective__c": "<p>This was a fun project. I learned a lot about building an Experience Cloud site from the ground up. It makes me grateful for the templates and other configurable features that Salesforce provides. Even though it was more work, I enjoyed figuring out how the site comes together and am excited to continue adding to it.</p>"
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef3"
            },
            "Name": "Host a Website from my Developer Org",
            "Status__c": "Done",
            "Goal__c": "<p>Share my knowledge in a creative way.</p>",
            "Requirements__c": "<ol><li>Provides access to unauthenticated (guest) users</li><li>No cost associated to keeping the website running</li><li>No server or infrastructure configuration needed</li></ol>",
            "Design__c": "<p>Salesforce has an article titled <a href=\"https://help.salesforce.com/s/articleView?id=sf.networks_secure_community.htm&amp;type=5\" target=\"_blank\">Securely Share Your Experience Cloud Sites with Guest Users</a> that includes information about sharing records with guest users. Looks like each Experience Cloud site has an associated Guest User Profile that can be used to grant record access to unauthenticated users.</p><p><br></p><p>Developer Orgs are free and it is possible to create Experience Cloud sites without any additional licensing costs. Salesforce takes care of the infrastructure to run each Salesforce instance, so that&#39;s done for us. </p>",
            "Implementation__c": "<p><b style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">Before Enabling Digital Experiences</b></p><p>I recommend enabling &quot;enhanced domains&quot; before enabling Digital Experiences if you would like your My Domain name to be the subdomain for your website. This is what I want, so I went to Salesforce Setup &gt; Company Settings &gt; My Domain and set the &quot;Use enhanced domains&quot; field to TRUE. After a couple minutes, Salesforce provisioned the enhanced domain and I clicked &quot;Deploy New Domain&quot;.</p><p><br></p><p><b>Enable Digital Experiences</b></p><p>After enabling &quot;enhanced domains&quot;, this was very straightforward. I just went to Salesforce Setup &gt; Feature Settings &gt; Digital Experiences &gt; Settings and set the &quot;Enable Digital Experiences&quot; field to TRUE. My domain name is already defined as brettbarlow-dev-ed.my.site.com, which is exactly what I was hoping for!</p><p><br></p><p><b>Create an Experience Cloud Site</b></p><p>After enabling digital experiences, I was redirected to a page that listed all of the Experience Cloud sites in my Developer Org. This list was empty and I started to create a new site with the LWR Template. I named the site &quot;Home&quot; and set the Authentication Option to &quot;Unauthenticated&quot;. I used &quot;Home&quot; as the name because this site will not have any suffix after the final `/`. It will be hosted at <a href=\"https://brettbarlow-dev-ed.my.site.com/\" target=\"_blank\">https://brettbarlow-dev-ed.my.site.com/</a>.</p><p><br></p><p>After a couple minutes, Salesforce made my site! I opened up the builder and added a few basic components to get started:</p><p><br></p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xRrX7&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003NzqA\" alt=\"image.png\"></img></p><p><b>Retrieving Metadata</b></p><p>Now I need to retrieve metadata for this Experience Cloud site so that I can put it in the <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed\" target=\"_blank\">brettbarlow-dev-ed</a> GitHub repo. The <a href=\"https://developer.salesforce.com/docs/atlas.en-us.communities_dev.meta/communities_dev/networks_migrating_from_sandbox.htm\" target=\"_blank\">Deploy Your Experience Cloud Site with the Metadata API</a> article discusses the different metadata types used by an Experience Cloud site. I ran the following command to retrieve everything I needed from my Developer Org:</p><p><br></p><p>```</p><p>sfdx force:source:retrieve \\</p><p> --targetusername=brettbarlow \\</p><p> --metadata=&quot;Network,CustomSite,ExperienceBundle,NavigationMenu,StaticResource,ApexPage,AuraDefinitionBundle,LightningComponentBundle,ApexClass,Profile&quot;</p><p>```</p><p><br></p><p>To verify I got everything, I&#39;d like to deploy this to a Scratch Org. I need to update my Scratch Org definition file to include to following so that Experience Cloud sites are enabled:</p><p>```</p><p>&quot;features&quot;: [&quot;Communities&quot;],</p><p>&quot;settings&quot;: {</p><p>&quot;communitiesSettings&quot;: {</p><p>&quot;enableNetworksEnabled&quot;: true</p><p>},</p><p>&quot;experienceBundleSettings&quot;: {</p><p>&quot;enableExperienceBundleMetadata&quot;: true</p><p>}</p><p>}</p><p>```</p><p><br></p><p>Deploying this to a scratch org was not straightforward. I found a working example on the <a href=\"https://github.com/trailheadapps/az-insurance\" target=\"_blank\">az-insurance</a> repo used that as a starting point.</p><p><br></p><p>I started by making a Scratch Org with my new config file:</p><p>```</p><p>sfdx force:org:create \\</p><p> --definitionfile=config/project-scratch-def.json \\</p><p> --setalias=brettbarlow-dev \\</p><p> --targetdevhubusername=brettbarlow</p><p>```</p><p><br></p><p>The Experience Cloud site needs to be created in the Scratch Org via an SFDX command before the rest of the metadata can be deployed. Doing this causes Salesforce to create metadata that our Experience Cloud site depends on:</p><p>```</p><p>sfdx force:community:create \\</p><p>--targetusername=brettbarlow-dev \\</p><p>--name=Home \\</p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\"> --urlpathprefix=&quot;&quot; \\</span></p><p>--templatename=&quot;Build Your Own (LWR)&quot; \\</p><p>templateParams.AuthenticationType=UNAUTHENTICATED</p><p>```</p><p><br></p><p>Then I deployed the base metadata for my org. Make sure to deploy the Static Resources here because it can&#39;t be deployed with the Experience Cloud metadata:</p><p>```</p><p>sfdx force:source:deploy \\</p><p>--targetusername=brettbarlow-dev \\</p><p>--metadata=ApexClass,Layout,Flexipage,CustomObject,LightningComponentBundle,StaticResource,CustomTab,PermissionSet,ApexPage,AuraDefinitionBundle</p><p>```</p><p><br></p><p>Then I deployed metadata for the Experience site:</p><p>```</p><p>sfdx force:source:deploy \\</p><p>--targetusername=brettbarlow-dev \\</p><p>--metadata=CustomSite,ExperienceBundle,NavigationMenu,Network,Profile</p><p>```</p><p><br></p><p><b>Pull Requests</b></p><ul><li><a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/pull/7\" target=\"_blank\">Metadata for Experience Site: Home #7</a></li></ul>",
            "Retrospective__c": "<p>Deploying the Experience Cloud site was a painful process. I had a hard time figuring out which metadata was needed and in what order it had to be deployed. This took several days of research. I hope Salesforce improves this process or at least documents how to do this in a more discoverable place.</p>"
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef4"
            },
            "Name": "Add My Resume to the Website",
            "Status__c": "Not Started",
            "Goal__c": null,
            "Requirements__c": null,
            "Design__c": null,
            "Implementation__c": null,
            "Retrospective__c": null
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef5"
            },
            "Name": "MailChimp Integration",
            "Status__c": "Not Started",
            "Goal__c": "<p>Learn how to integrate Salesforce with MailChimp</p>",
            "Requirements__c": null,
            "Design__c": null,
            "Implementation__c": null,
            "Retrospective__c": null
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef6"
            },
            "Name": "Implement CICD for my Developer Org",
            "Status__c": "Done",
            "Goal__c": "<p>Automate testing and deployment.</p>",
            "Requirements__c": "<ol><li>Automatically deploy changes when a new commit is made on the main branch</li><li>Run a deployment every night</li></ol>",
            "Design__c": "<p><span style=\"color: rgb(68, 68, 68);\">Salesforce has an article titled </span><a href=\"https://developer.salesforce.com/blogs/2020/01/using-salesforce-dx-with-github-actions\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">Using Salesforce DX with GitHub Actions</a><span style=\"color: rgb(68, 68, 68);\"> that includes info on a lot of the tools I&#39;ll need. Looks like Salesforce is already using GitHub Actions in their repos, including the </span><a href=\"https://github.com/trailheadapps/lwc-recipes\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">lwc-recipes</a> repo.<span style=\"color: rgb(68, 68, 68);\"> I was considering using CircleCI because I have experience with that, but I think I&#39;m going to try out GitHub Actions.</span></p>",
            "Implementation__c": "<p>The <a href=\"https://github.com/trailheadapps/lwc-recipes\" target=\"_blank\">lwc-recipes</a> repo has a pretty nice <a href=\"https://github.com/trailheadapps/lwc-recipes/blob/main/.github/workflows/ci.yml\" target=\"_blank\">ci.yml</a> file. They are doing a lot of what I&#39;m looking to do, so it&#39;s a great example to work from. I used a few pieces of this to make my initial deployment workflow: <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/blob/main/.github/workflows/salesforce.yml\" target=\"_blank\">salesforce.yml</a>.</p><p><br></p><p>This workflow deploys to a Scratch Org first to verify that the change does not introduce any breakages. I use Scratch Orgs during development, so it would be pretty disruptive if I couldn&#39;t make a new Scratch Org from the repo&#39;s main branch.</p><p><br></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">When doing research on using Scratch Orgs, I found the </span><a href=\"https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_editions_and_allocations.htm\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">Supported Scratch Org Editions and Allocations</a><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\"> page that says Developer Orgs can only create 6 Scratch Orgs per day. I&#39;ll need to keep an eye on this so that I leave room for the CICD process to run.</span></p><p><br></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">GitHub Actions has a lot of interesting capabilities, but I&#39;d like to get an initial CICD workflow deployed so that I can lock down the main branch. I added </span>TODOs for some of the fancier things like linting and code coverage reporting. Then I added a branch protection rule to require a Pull Request when committing to the main branch.</p><p><br></p><p>After running a few tests, this seems to be working well:</p><p><br></p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xS1Zo&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003Nxm6\" alt=\"Screen Shot 2022-05-22 at 4.03.19 PM.png\"></img></p><p><span class=\"ql-cursor\">﻿</span><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xS1Zo&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003NxmB\" alt=\"Screen Shot 2022-05-22 at 4.04.03 PM.png\"></img></p>",
            "Retrospective__c": "<p>The <a href=\"https://developer.salesforce.com/blogs/2020/01/using-salesforce-dx-with-github-actions\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">Using Salesforce DX with GitHub Actions</a> article and the <a href=\"https://github.com/trailheadapps/lwc-recipes\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">lwc-recipes</a> repo were very helpful in getting this set up. The article got me inspired to use GitHub Actions and the repo showed me how easy it was to use. I&#39;m looking forward to adding more to my CICD process.</p>"
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef7"
            },
            "Name": "Put my Developer Org in Source Control",
            "Status__c": "Done",
            "Goal__c": "<p>Decouple my development and code review processes.</p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);\">Track incremental changes to my Developer Org. </span></p>",
            "Requirements__c": "<ol><li>Use a remote source control management system as the source of truth</li><li>Remote source control system should have a &quot;public&quot; option so that I can make this open source</li><li>Require all changes to be reviewed (even if they are just self-reviews)<ol><li>Put another way - remove the ability to commit directly to the main branch</li></ol></li></ol>",
            "Design__c": "<p><b>SFDX Format</b></p><p>Let&#39;s start by making a local SFDX project named brettbarlow-dev-ed. Looks like `sfdx force:project:create` will take care of this for us. From here we can use `sfdx force:source:retrieve` to get any metadata that I configured in the UI already. I think that&#39;s just the Project__c object, but I&#39;ll look around a bit to make sure.</p><p><br></p><p><b>Remote Source Control Management System</b></p><p>After looking at a few common options (<a href=\"https://github.com/\" target=\"_blank\">GitHub</a>, <a href=\"https://bitbucket.org/\" target=\"_blank\">Bitbucket</a>, <a href=\"https://about.gitlab.com/\" target=\"_blank\">GitLab</a>), it seems that GitHub is the most popular for Salesforce work so I&#39;ll go with that. I&#39;ll make a new GitHub repo called brettbarlow-dev-ed and push the SFDX project to it.</p>",
            "Implementation__c": "<p><b>Retrieving Metadata in Source Format</b></p><p>I made a new SFDX project and authenticated to my Developer Org:</p><p>```</p><p>sfdx force:project:create \\</p><p>--projectname=brettbarlow-dev-ed \\</p><p>--template=empty</p><p><br></p><p>sfdx auth:web:login \\</p><p>--setalias=brettbarlow \\</p><p>--instanceurl=https://brettbarlow-dev-ed.my.salesforce.com</p><p>```</p><p><br></p><p>Then I did a retrieve to get a few things that I already <span style=\"color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);\">configured in the Salesforce Setup UI:</span></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">```</span></p><p>sfdx force:source:retrieve \\</p><p> --targetusername=brettbarlow \\</p><p> --metadata=&quot;CustomObject:Project__c,Layout:Project__c-Project Layout,CustomTab:Project__c,Flexipage:Project_Record_Page,PermissionSet:Projects_User&quot;</p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">```</span></p><p><br></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">To verify that I got everything, I pushed these files to a scratch org, granted my user access and tested it out:</span></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">```</span></p><p>sfdx force:org:create \\</p><p>--definitionfile=config/project-scratch-def.json \\</p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\"> --setalias=brettbarlow-dev \\</span></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\"> --targetdevhubusername=brettbarlow</span></p><p><br></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">sfdx force:source:push \\</span></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\"> --targetusername=brettbarlow-dev</span></p><p><br></p><p>sfdx force:user:permset:assign \\</p><p>--permsetname=Projects_User \\</p><p>--targetusername=brettbarlow-dev</p><p><br></p><p>sfdx force:org:open \\</p><p>--targetusername=brettbarlow-dev</p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">```</span></p><p><br></p><p><b>Push to GitHub</b></p><p>Now that I have all of the metadata in source format, it&#39;s time to push it to a GitHub repo. I used the GitHub UI to make a repo. I would like to make this open source, so I selected the MIT License when making the repo.</p><p><br></p><p>After creating the GitHub repo, I initialized an empty git repo locally and added my GitHub repo as a remote:</p><p>```</p><p>git init</p><p>git remote add origin git@github.com:thebrettbarlow/brettbarlow-dev-ed.git</p><p>git pull origin main</p><p>```</p><p><br></p><p>Then I added my local changes and pushed those up to GitHub:</p><p>```</p><p>git add .</p><p>git commit -m &quot;Initial metadata retrieve&quot;</p><p>git push origin main</p><p>```</p><p><br></p><p>After the push, I noticed that the `.sf` and `.sfdx` folders were pushed to GitHub. <span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">These are for local development so I&#39;d like to remove them via a `.gitignore` file. I&#39;m sure there will be other files I&#39;d like to ignore, but can&#39;t think of them all off the top of my head. </span></p><p><br></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);\">I found a pretty comprehensive </span><a href=\"https://github.com/trailheadapps/dreamhouse-sfdx/blob/master/.gitignore\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">.gitignore</a> file in the <a href=\"https://github.com/trailheadapps/dreamhouse-sfdx\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">dreamhouse-sfdx</a> repo. I copied most of this file to make my <a href=\"https://github.com/thebrettbarlow/brettbarlow-dev-ed/blob/main/.gitignore\" target=\"_blank\">.gitignore</a>. Then I followed a <a href=\"https://stackoverflow.com/a/19757964\" target=\"_blank\">StackOverflow post</a> to apply the .gitignore to an existing repo:</p><p>```</p><p># Add the new .gitignore file</p><p>git add .</p><p><br></p><p># Remove everything from the index and re-add everything</p><p>git rm -r --cached .</p><p>git add .</p><p>git commit -m &quot;Added .gitignore&quot;</p><p>git push origin main</p><p>```</p>",
            "Retrospective__c": "<p>It&#39;s always exciting starting a new GitHub repo! The SFDX commands made it easy to make a project and retrieve metadata. Testing it in a scratch org was a good call because I forgot the Flexipage and Layout the first time.</p>"
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef8"
            },
            "Name": "Add Commit Checks",
            "Status__c": "Not Started",
            "Goal__c": null,
            "Requirements__c": "<ol><li>Formatting</li><li>Linting</li><li>PMD</li><li>&quot;Require status checks to pass before merging&quot; (GitHub branch protection rule)</li><li>&quot;Require deployments to succeed before merging&quot; (GitHub branch protection rule)</li></ol>",
            "Design__c": null,
            "Implementation__c": null,
            "Retrospective__c": null
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef9"
            },
            "Name": "Configure GitHub Deployment Environments",
            "Status__c": "Not Started",
            "Goal__c": null,
            "Requirements__c": null,
            "Design__c": null,
            "Implementation__c": null,
            "Retrospective__c": null
        },
        {
            "attributes": {
                "type": "Project__c",
                "referenceId": "Project__cRef10"
            },
            "Name": "Configure Google SSO",
            "Status__c": "Done",
            "Goal__c": "<p>Remove the need to remember a password for my Dev Org.</p>",
            "Requirements__c": "<ol><li>Have the ability to log in from my custom domain (brettbarlow.com)</li><li>Delegate the Multi-Factor Authentication (MFA) verification to Google</li></ol>",
            "Design__c": "<p><b style=\"font-size: 14px;\">Configure Google Admin</b></p><p>The <a href=\"https://support.google.com/a/answer/6194938?product_name=UnuFlow&amp;hl=en&amp;visit_id=637885037094132570-1169418274&amp;rd=1&amp;src=supportwidget0&amp;hl=en\" target=\"_blank\">Salesforce cloud application</a> article on the Google Workspace Admin Help page includes instructions for how to set up SSO via SAML for Salesforce. Looks like this will work for configuring SSO from my brettbarlow.com account.</p><p><br></p><p><b style=\"font-size: 14px;\">Delegate MFA verification to Google</b></p><p><span style=\"color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);\">Salesforce has a help article titled </span><a href=\"https://help.salesforce.com/s/articleView?id=sf.mfa_sso_thirdparty_idp.htm&amp;type=5\" target=\"_blank\">Use Your SSO Identity Provider’s MFA Service</a>. It says we just need to specify our SSO configuration as a High Assurance session in Session Security Levels. This is done in the Session Settings menu in Setup.</p>",
            "Implementation__c": "<p><b style=\"background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-size: 14px;\">Configuring the SAML Identity Provider in Google</b></p><p>Follow these steps to get started:</p><ol><li><a href=\"https://admin.google.com/\" target=\"_blank\">Google Admin</a> &gt; Apps &gt; Web and mobile apps</li><li>Add app &gt; Search for app</li><li>Search for &quot;Salesforce&quot; and select &quot;Salesforce Web (SAML)&quot;</li></ol><p>Download a couple of things from the first screen. We&#39;ll upload these to Salesforce later:</p><ol><li>IdP Metadata</li><li>Certificate</li></ol><p>I was confused by the &quot;Service provider details&quot; screen (where the Salesforce URLs are defined). Defining these terms helped me understand this:</p><ul><li><a href=\"https://en.wikipedia.org/wiki/Service_provider_(SAML)\" target=\"_blank\">Service Provider</a>: System that receives authentication assertions<ul><li>Salesforce is the Service Provider in our case</li></ul></li><li><a href=\"https://en.wikipedia.org/wiki/Identity_provider_(SAML)\" target=\"_blank\">Identity Provider</a>: System that issues authentication assertions<ul><li>Google is the Identity Provider in our case</li></ul></li><li>ACS URL: Endpoint on the Service Provider that the Identity Provider will redirect to with its authentication response</li><li>Entity Id: Globally unique name for an Identity Provider or a Service Provider</li><li>Start Url: The page the user attempted to access before they were authenticated.<ul><li>This needs to match the Login URL field in the Salesforce Single-Sign On Settings. The default in the field on Google Admin includes a trailing / but Salesforce doesn&#39;t have it. Removing the trailing / got this working for me</li></ul></li></ul><p>I skipped both the Attribute Mapping and Group Membership steps. I didn&#39;t know what to do with these. Maybe it&#39;s for more advanced use cases?</p><p><br></p><p>This is what I ended up with:</p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xRrSu&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003Nx8j\" alt=\"Screen Shot 2022-05-20 at 2.33.58 PM.png\"></img></p><p><br></p><p><b style=\"font-size: 14px; background-color: rgb(255, 255, 255);\">Configuring (SAML) Single Sign-On Settings in Salesforce</b></p><p>Just three steps in Salesforce Setup &gt; Identity &gt; Single Sign-On Settings.</p><ol><li>Edit Single Sign-On Settings to set SAML Enabled to TRUE</li><li>Click the &quot;New from Metadata File&quot; button and upload the IdP Metadata you downloaded from Google Admin</li><li>The Request Signing Certificate field will be empty after uploading the IdP Metadata. Upload the Certificate you downloaded from Google Admin</li></ol><p>I did not put anything in the Federation ID field on my User in Salesforce because my Salesforce Username is the same as my Google email address.</p><p><br></p><p>This is what I ended up with:</p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xRrSu&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003Nx9D\" alt=\"Screen Shot 2022-05-20 at 2.38.06 PM.png\"></img></p><p><b style=\"background-color: rgb(255, 255, 255); font-size: 14px;\">Delegate MFA Verification to Google</b></p><p>This was pretty straightforward to set up. I went to Salesforce Setup &gt; Security &gt; Session Settings and included the Single Sign-On Setting entry I just made in the High Assurance column:</p><p><br></p><p><img src=\"https://brettbarlow-dev-ed.file.force.com/servlet/rtaImage?eid=a008a00000xRrSu&amp;feoid=00N8a000007vWFJ&amp;refid=0EM8a000003NxO9\" alt=\"Screen Shot 2022-05-21 at 10.01.38 AM.png\"></img></p><p>After doing this, I updated the &quot;Session Security Level Required at Login&quot; field in all Profiles to be &quot;High Assurance&quot;. I had to re-authenticate after doing this. I wonder if other users who are logged in experience the same thing?</p>",
            "Retrospective__c": "<p>Patience, patience, patience. I spent a lot of time on this because it wasn&#39;t working right after I configured it. I kept seeing the &quot;not_a_saml_app&quot; error when I was trying it and thought I did something wrong.</p><p><br></p><p>This is simple to set up, but the change can take several hours to take effect. I recommend setting it up and coming back the next day to try it out.</p>"
        }
    ]
}